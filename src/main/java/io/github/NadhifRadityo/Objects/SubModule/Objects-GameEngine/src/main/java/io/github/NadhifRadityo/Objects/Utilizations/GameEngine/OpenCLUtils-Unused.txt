
	private static final Method JOGAMP_METHOD_getDirectBufferAddress;
	static { try {
		JOGAMP_METHOD_getDirectBufferAddress = Class.forName("com.jogamp.opencl.InternalBufferUtil").getMethod("getDirectBufferAddress", Buffer.class);
	} catch(Exception e) { throw new RuntimeException("Cannot get method!", e); } }

    private static boolean JOGAMP_isDeviceField(int key) { return key >= 4096 && key <= 4157; }
	private static boolean JOGAMP_isPlatformField(int key) { return key >= 2304 && key <= 2308; }
	private static boolean JOGAMP_isProgramField(int key) { return key >= 4448 && key <= 4454; }
	private static boolean JOGAMP_isKernelField(int key) { return key >= 4496 && key <= 4500; }
	private static boolean JOGAMP_isKernelWorkGroupField(int key) { return key >= 4528 && key <= 4532; }
	private static void JOGAMP_checkField(int key) { if(JOGAMP_infoMethod(key) == null) throw new IllegalArgumentException("Invalid Key!"); }
	private static String JOGAMP_infoMethod(int key) {
		if(JOGAMP_isDeviceField(key)) return "clGetDeviceInfo";
		else if(JOGAMP_isPlatformField(key)) return "clGetPlatformInfo";
		else if(JOGAMP_isProgramField(key)) return "clGetProgramInfo";
		else if(JOGAMP_isKernelField(key)) return "clGetKernelInfo";
		else if(JOGAMP_isKernelWorkGroupField(key)) return "clGetKernelWorkGroupInfo";
		else return null;
	}
	private static void JOGAMP_check(int[] statuses) { for(int status : statuses) if(status != com.jogamp.opencl.llb.CL.CL_SUCCESS) throw new CLException("Errors: " + ArrayUtils.deepToString(statuses)); }
	private static long JOGAMP_getDirectBufferAddress(Buffer buffer) { try { return (long) JOGAMP_METHOD_getDirectBufferAddress.invoke(null, buffer); } catch(Exception e) { throw new RuntimeException("Cannot get address of buffer!", e); } }

	public static long JOGAMP_createProgram(com.jogamp.opencl.CLContext context, String source, int[] status) {
		status = status == null || status.length <= 0 ? new int[1] : status;
		IntBuffer _status = BufferUtils.allocateIntBuffer(1);
		PointerBuffer length = BufferUtils.allocatePointerBuffer(1).put(0, source.length());
		try { return context.getCL().clCreateProgramWithSource(context.ID, 1, new String[]{ source }, length, _status);
		} finally { status[1] = _status.get(); deallocate(_status); deallocate(length.getBuffer()); }
	}
	public static int JOGAMP_destroyProgram(com.jogamp.opencl.CLContext context, long program) { return context.getCL().clReleaseProgram(program); }
	public static int JOGAMP_getKernelCounts(com.jogamp.opencl.CLContext context, long program, int[] status) {
		status = status == null || status.length <= 0 ? new int[1] : status;
		IntBuffer numKernels = BufferUtils.allocateIntBuffer(1);
		status[1] = context.getCL().clCreateKernelsInProgram(program, 0, null, numKernels);
		return getIntThenDestroy(numKernels, 0);
	}
	public static long JOGAMP_createKernel(com.jogamp.opencl.CLContext context, long program, String name, int[] status) {
		status = status == null || status.length <= 0 ? new int[1] : status;
		return context.getCL().clCreateKernel(program, name, status, 0);
	}
	public static int JOGAMP_destroyKernel(com.jogamp.opencl.CLContext context, long kernel) { return context.getCL().clReleaseKernel(kernel); }
	public static long JOGAMP_createCommandQueue(com.jogamp.opencl.CLContext context, long device, int[] status, CLCommandQueue.Mode... properties) {
		int flags = 0; for(CLCommandQueue.Mode property : properties) flags |= property.QUEUE_MODE;
		status = status == null || status.length <= 0 ? new int[1] : status;
		return context.getCL().clCreateCommandQueue(context.ID, device, flags, status, 0);
	}
	public static int JOGAMP_destroyCommandQueue(com.jogamp.opencl.CLContext context, long commandQueue) { return context.getCL().clReleaseCommandQueue(commandQueue); }


	public static long[] JOGAMP_getDeviceList(com.jogamp.opencl.CLContext context, long program, int[] status) {
		status = status == null || status.length <= 1 ? new int[2] : status;
		PointerBuffer size = BufferUtils.allocatePointerBuffer(1);
		status[0] = context.getCL().clGetProgramInfo(program, CLProgramBinding.CL_PROGRAM_DEVICES, 0, null, size);
		ByteBuffer ids = BufferUtils.allocateByteBuffer((int) size.get(0));
		status[1] = context.getCL().clGetProgramInfo(program, CLProgramBinding.CL_PROGRAM_DEVICES, ids.capacity(), ids, null); try {
		long[] devices = new long[ids.capacity() / (Platform.is32Bit() ? 4 : 8)]; boolean is32Bit = Platform.is32Bit();
		for(int i = 0; i < devices.length; i++) devices[i] = is32Bit ? ids.getInt() : ids.getLong();
		return devices; } finally { deallocate(size.getBuffer()); deallocate(ids); }
	}
	public static String JOGAMP_getBuildInfoString(com.jogamp.opencl.CLContext context, long program, long device, int flag, int[] status) {
		status = status == null || status.length <= 1 ? new int[2] : status;
		PointerBuffer size = BufferUtils.allocatePointerBuffer(1);
		status[0] = context.getCL().clGetProgramBuildInfo(program, device, flag, 0, null, size);
		int pSize = (int) size.get(0); ByteBuffer buffer = BufferUtils.allocateByteBuffer(pSize);
		status[1] = context.getCL().clGetProgramBuildInfo(program, device, flag, buffer.capacity(), buffer, null);
		try { return CLUtil.clString2JavaString(buffer, pSize); } finally { deallocate(size.getBuffer()); deallocate(buffer); }
	}
	public static String JOGAMP_getBuildLog(com.jogamp.opencl.CLContext context, long program, long device, int[] status) {
		return JOGAMP_getBuildInfoString(context, program, device, CLProgramBinding.CL_PROGRAM_BUILD_LOG, status);
	}
	public static String JOGAMP_getBuildLog(com.jogamp.opencl.CLContext context, long program, long[] devices) {
		StringBuilder stringBuilder = Pool.tryBorrow(Pool.getPool(StringBuilder.class)); try {
		int[] status = new int[2]; ByteBuffer buffer = BufferUtils.allocateByteBuffer(128);
		PointerBuffer pointerBuffer = BufferUtils.allocatePointerBuffer(1);
		for(int i = 0; i < devices.length; i++) { long device = devices[i];
			stringBuilder.append("CLDevice [id: ").append(device);
			stringBuilder.append(" name: ").append(JOGAMP_getString(context.getCL(), "clGetDeviceInfo", device, CLDeviceBinding.CL_DEVICE_NAME, buffer, pointerBuffer, status)); JOGAMP_check(status);
			stringBuilder.append(" type: ").append(com.jogamp.opencl.CLDevice.Type.valueOf((int) JOGAMP_getLong(context.getCL(), "clGetDeviceInfo", device, CLDeviceBinding.CL_DEVICE_TYPE, buffer, status))); JOGAMP_check(status);
			stringBuilder.append(" profile: ").append(JOGAMP_getString(context.getCL(), "clGetDeviceInfo", device, CLDeviceBinding.CL_DEVICE_PROFILE, buffer, pointerBuffer, status)).append("]"); JOGAMP_check(status);
			String log = JOGAMP_getBuildLog(context, program, device, status).trim(); stringBuilder.append(log.isEmpty() ? "    <empty>" : log); JOGAMP_check(status);
			if(i != devices.length - 1) stringBuilder.append("\n");
		} return stringBuilder.toString(); } finally { Pool.returnObject(StringBuilder.class, stringBuilder); }
	}
	public static int JOGAMP_getBuildInfo(com.jogamp.opencl.CLContext context, long program, long device, int flag, int[] status) {
		status = status == null || status.length <= 0 ? new int[1] : status;
		ByteBuffer buffer = BufferUtils.allocateByteBuffer(4);
		status[0] = context.getCL().clGetProgramBuildInfo(program, device, flag, buffer.capacity(), buffer, null);
		try { return buffer.getInt(); } finally { deallocate(buffer); }
	}
	public static boolean JOGAMP_isExecutable(com.jogamp.opencl.CLContext context, long program) {
		int[] status = new int[2]; long[] devices = JOGAMP_getDeviceList(context, program, status);
		JOGAMP_check(status); for(long device : devices) {
			int buildInfo = JOGAMP_getBuildInfo(context, program, device, CLProgramBinding.CL_PROGRAM_BUILD_STATUS, status);
			JOGAMP_check(status); if(buildInfo == CLProgramBinding.CL_BUILD_SUCCESS) return true;
		} return false;
	}
	public static Map<Long, byte[]> JOGAMP_getBinaries(com.jogamp.opencl.CLContext context, long program) {
		int[] status = new int[2]; long[] devices = JOGAMP_getDeviceList(context, program, status); JOGAMP_check(status);
		PointerBuffer sizes = BufferUtils.allocatePointerBuffer(devices.length);
		status[0] = context.getCL().clGetProgramInfo(program, CLProgramBinding.CL_PROGRAM_BINARY_SIZES, sizes.capacity() * sizes.elementSize(), sizes.getBuffer(), null);
		JOGAMP_check(status); int binariesSize = 0; while(sizes.remaining() != 0) { final int size = (int) sizes.get(); binariesSize += size; }
		ByteBuffer binaries = BufferUtils.allocateByteBuffer(binariesSize); long address = JOGAMP_getDirectBufferAddress(binaries);
		PointerBuffer addresses = BufferUtils.allocatePointerBuffer(sizes.capacity()); sizes.rewind();
		while(sizes.remaining() != 0) { addresses.put(address); address += sizes.get(); } addresses.rewind();
		status[0] = context.getCL().clGetProgramInfo(program, CLProgramBinding.CL_PROGRAM_BINARIES, addresses.capacity() * addresses.elementSize(), addresses.getBuffer(), null);
		JOGAMP_check(status); Map<Long, byte[]> map = new LinkedHashMap<>(); sizes.rewind(); for(long device : devices) { byte[] bytes = new byte[(int) sizes.get()]; binaries.get(bytes); map.put(device, bytes); }
		try { return map; } finally { deallocate(sizes.getBuffer()); deallocate(binaries); deallocate(addresses.getBuffer()); }
	}