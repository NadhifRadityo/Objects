apply from: 'common.gradle'
context(this) { require([export_functions_only(), 'common.gradle']) }

class $ {
	static def $this
	static Map<String, Boolean> extendedProjects = new HashMap<>()

	static def extend(String projectPath, String projectName = null) {
		int splitIndex = projectPath.indexOf(':')
		List<String> path = Arrays.asList((splitIndex != -1 ? projectPath.substring(0, splitIndex) : projectPath).split('/'))
		String name = projectName != null ? projectName : splitIndex != -1 ? projectPath.substring(splitIndex + 1) : String.join('$', path.stream()
				.map{it.substring(0, 1).toUpperCase() + it.substring(1)}.toArray(String[]::new))
		String id = "${String.join('#', path)}?$name"
		extendedProjects.put(id, false)
		$this.include id
	}
	static def apply() {
		$this.plog "Configure for project '${$this.rootProject.name}'"
		$this.rootProject.children.each { project ->
			String projectName = project.name
			Boolean applied = extendedProjects.get(projectName)
			if(applied == null || applied) return
			extendedProjects.put(projectName, true)
			int splitIndex = projectName.indexOf('?')
			List<String> path = Arrays.asList(projectName.substring(0, splitIndex).split("#"))
			String name = project.name.substring(splitIndex + 1)
			project.projectDir = new File(String.join('/', path))
			project.name = name
			$this.pinfo "Imported ${String.join('/', path)} -> $name settings"
			assert project.projectDir.isDirectory()
			assert project.buildFile.isFile()
		}
	}
	static def extended_projects() {
		return Collections.unmodifiableMap(extendedProjects)
	}
}
{
	$.$this = this
}
gradle.buildFinished {
	$.$this = null
	$.extendedProjects.clear()
}

ext {
	ext_settings_$imported = buildscript.sourceFile.getCanonicalPath()
	ext_settings_extend = $.&extend
	ext_settings_apply = $.&apply
	ext_settings_extended_projects = $.&extended_projects
}

def extend = $.&extend
def apply = $.&apply
if(!contains_flag('export_functions_only')) {
	rootProject.name = 'Objects'
	extend('libraries/__library__', 'Library')
	extend('packages/Functional')
	apply()
}
