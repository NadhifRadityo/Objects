import java.lang.reflect.Method

class GLOBAL {
	protected static ClassLoader classLoader
	protected static Class<?> CLASS_Library
	protected static Method METHOD_Library_main
}

def clear = { ->
	GLOBAL.classLoader = null
	GLOBAL.CLASS_Library = null
	GLOBAL.METHOD_Library_main = null
}
def load = { ->
	if(GLOBAL.classLoader != null)
		return GLOBAL.classLoader
	List<File> outputDirectories = new ArrayList<>()
	outputDirectories += sourceSets.main.output.files
	outputDirectories += sourceSets.main.runtimeClasspath.files
	outputDirectories += sourceSets.test.output.files
	outputDirectories += sourceSets.test.runtimeClasspath.files
	URL[] outputURLs = outputDirectories.stream().map { it.toURI().toURL() }.toArray(URL[]::new)
	GLOBAL.classLoader = new URLClassLoader(outputURLs, this.project.getClass().getClassLoader())
	GLOBAL.CLASS_Library = GLOBAL.classLoader.loadClass('io.github.NadhifRadityo.Objects.Library.Library')
	GLOBAL.METHOD_Library_main = GLOBAL.CLASS_Library.getMethod('main', String[].class)

	Class<?> CLASS_GradleUtils = GLOBAL.classLoader.loadClass('io.github.NadhifRadityo.Objects.Library.GradleUtils')
	CLASS_GradleUtils.getField("__PROJECT__").set(null, this.project)
}
def run = { String[] args ->
	GLOBAL.METHOD_Library_main.invoke(null, new Object[] { args })
}

ext {
	ext_load_clear = clear
	ext_load_load = load
	ext_load_run = run
}
