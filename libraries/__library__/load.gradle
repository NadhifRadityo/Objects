import org.gradle.api.internal.project.DefaultProject

import java.lang.reflect.Method

class GLOBAL {
	protected static ClassLoader classLoader
	protected static Class<?> CLASS_Library
	protected static Method METHOD_Library_entry
}

def clear = { ->
	GLOBAL.classLoader = null
	GLOBAL.CLASS_Library = null
	GLOBAL.METHOD_Library_entry = null
}
def load = { ->
	if(GLOBAL.classLoader != null)
		return GLOBAL.classLoader
	List<File> outputDirectories = new ArrayList<>()
	outputDirectories += sourceSets.main.output.files
	outputDirectories += sourceSets.main.runtimeClasspath.files
	URL[] outputURLs = outputDirectories.stream().map { it.toURI().toURL() }.toArray(URL[]::new)
	GLOBAL.classLoader = new URLClassLoader(outputURLs, this.project.getClass().getClassLoader())
	GLOBAL.CLASS_Library = GLOBAL.classLoader.loadClass('io.github.NadhifRadityo.Library.LibraryEntry')
	GLOBAL.METHOD_Library_entry = GLOBAL.CLASS_Library.getDeclaredMethod('entry', DefaultProject.class, File.class, Map.class)
	GLOBAL.METHOD_Library_entry.setAccessible(true)
}
def available = { ->
	return GLOBAL.METHOD_Library_entry != null
}
def run = { File rootDirectory, Map<String, File> modules ->
	GLOBAL.METHOD_Library_entry.invoke(null, this.project, rootDirectory, modules)
}

ext {
	ext_load_clear = clear
	ext_load_load = load
	ext_load_available = available
	ext_load_run = run
}
