import java.nio.file.Path
import java.nio.file.Files

class $ {
	static def $this
	static Map<String, File> loadedModules = new HashMap<>()
	static File relativeToDir
	static File librariesDir

	static void set_relative_to_dir(File relativeToDir) {
		$.relativeToDir = relativeToDir
		if(relativeToDir == $this.buildscript.sourceFile.parentFile) return
		Path target = new File($this.buildscript.sourceFile.parentFile, 'src').toPath()
		Path link = new File(relativeToDir, 'src').toPath()
		if(Files.isSymbolicLink(link) && Files.readSymbolicLink(link).toAbsolutePath() == target.toAbsolutePath())
			return
		Files.deleteIfExists(link)
		try { Files.createSymbolicLink(link, target) } catch(Throwable ignored) { }
		if(Files.exists(link)) return
		$this.pwarn 'Cannot create library junction, reverting to use srcDirs alternative. Your IDE might not like this because modules cannot share the same content root.'
		$this.pwarn 'If you have problem with this alternative, try to elevate either gradle or your IDE as administrator.'
		String sourcePath = $this.$_.getRelativeFile(relativeToDir, target.resolve('main').toFile()).getPath()
		$this.sourceSets {
			main.java { srcDirs = [ "$sourcePath/java" ] }
			main.kotlin { srcDirs = [ "$sourcePath/kotlin" ] }
			main.resources { srcDirs = [ "$sourcePath/resources" ] }
		}
	}
	static void set_libraries_dir(File librariesDir) {
		$.librariesDir = librariesDir
	}
	static File root_directory() {
		return $this.$_.getRelativeFile(new File(System.getProperty('user.dir')), librariesDir)
	}
	static void module(String path) {
		String moduleIdentifier = path.toLowerCase().replaceAll('[^A-Za-z0-9]', '_')
		File modulePath = new File(root_directory(), path)
		if(loadedModules.containsKey(moduleIdentifier)) {
			$this.pwarn "Library module '$path' has the same identifier"
			return
		}
		$this.pinfo "Imported library module '$path'"
		loadedModules.put(moduleIdentifier, modulePath)
		String sourcePath = $this.$_.getRelativeFile(relativeToDir, modulePath).getPath()
		$this.sourceSets {
			main.java { srcDir "$sourcePath/java" }
			main.kotlin { srcDir "$sourcePath/kotlin" }
			main.resources { srcDir "$sourcePath/resources" }
		}
	}
	static Map<String, File> loaded_modules() {
		return Collections.unmodifiableMap(loadedModules)
	}
	static void __default_import_action(def info) {
		def $that = info.importContext
		if(!$that.contains_flag('dont_clear_last_state')) {
			loadedModules.clear()
			relativeToDir = null
			librariesDir = null
		}
		if(!$that.contains_flag('export_functions_only') && !$that.contains_flag('dont_clear_last_state')) {
			set_relative_to_dir($that.buildscript.sourceFile.parentFile as File)
			set_libraries_dir($that.buildscript.sourceFile.parentFile.parentFile as File)
		}
	}
}
context(this) {
	applyScript()
	scriptInit {
		$.$this = this
		Import.addImportAction(buildscript.sourceFile, $.&__default_import_action)
	}
	scriptDeinit {
		$.$this = null
		Import.removeImportAction(buildscript.sourceFile)
		$.relativeToDir = null
		$.librariesDir = null
	}
}

exportTo('ext_libraryModules_set_relative_to_dir', $.&set_relative_to_dir)
exportTo('ext_libraryModules_set_libraries_dir', $.&set_libraries_dir)
exportTo('ext_libraryModules_root_directory', $.&root_directory)
exportTo('ext_libraryModules_module', $.&module)
exportTo('ext_libraryModules_loaded_modules', $.&loaded_modules)
