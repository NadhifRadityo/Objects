import org.gradle.api.internal.project.DefaultProject

import java.lang.reflect.Method
import java.util.stream.Stream

require(this, '/common.gradle')

class $ {
	static def $this
	static ClassLoader classLoader
	static Class<?> CLASS_Library
	static Method METHOD_Library_entry

	static void clear() {
		classLoader = null
		CLASS_Library = null
		METHOD_Library_entry = null
	}
	static File[] source_files() {
		if(!$this.buildDir.exists()) return new File[0]
		List<File> sourceFiles = new ArrayList<>()
		sourceFiles += $this.sourceSets.main.output.files
		sourceFiles += $this.sourceSets.main.runtimeClasspath.files
		return sourceFiles.toArray(new File[0])
	}
	static ClassLoader load() {
		if(classLoader != null) return classLoader
		URL[] sourceURLs = Stream.of(source_files()).map { it.toURI().toURL() }.toArray(URL[]::new)
		try {
			classLoader = new URLClassLoader(sourceURLs, $this.project.getClass().getClassLoader())
			CLASS_Library = classLoader.loadClass('io.github.NadhifRadityo.Library.LibraryEntry')
			METHOD_Library_entry = CLASS_Library.getDeclaredMethod('entry', DefaultProject.class, File.class, Map.class)
			METHOD_Library_entry.setAccessible(true)
		} catch(Exception e) {
			$this.perror 'Error while loading library entry point\n', e
		}
		return classLoader
	}
	static boolean available() {
		return METHOD_Library_entry != null
	}
	static void run(File rootDirectory, Map<String, File> modules) {
		try {
			METHOD_Library_entry.invoke(null, $this.project, rootDirectory, modules)
		} catch(Exception e) {
			$this.perror 'Error while running library entry point\n', e
		}
	}
}
{
	$.$this = this
}

ext {
	ext_libraryLoad_clear = $.&clear
	ext_libraryLoad_source_files = $.&source_files
	ext_libraryLoad_load = $.&load
	ext_libraryLoad_available = $.&available
	ext_libraryLoad_run = $.&run
}
